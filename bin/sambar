#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , jade    = require('jade')
  , pkg     = require('../package.json')
  , version = pkg.version
  , mkdirp  = require('mkdirp')
  , copyDir = require('wrench').copyDirSyncRecursive
  , os      = require('os')
  , fs      = require('fs')
  , _       = require('underscore')
  , gm      = require('gm')
  , async   = require('async')
  ;

// CLI

program
  .version(version)
  .option('-c, --configPath [path]', 'Config path')
  .option('-t, --templatePath [path]', 'Template path')
  .option('-o, --outputDir [path]',    'Output directory')
  .option('-f, --force',        'Force on non-empty directory')
  .parse(process.argv);

/* Generate site. */

(function createSite(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createSiteAt(path);
    } else {
      program.confirm('Destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createSiteAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(program.outputDir);

/**
 * Create site at the given directory `path`.
 *
 * @param {String} path
 */
function createSiteAt(path) {
  console.log();
  process.on('exit', function(){
    console.log();
    console.log('   bye');
  });

  /* Create output directory. */
  mkdir(path);

  /* Get JSON config. */
  var cfg = require(process.cwd()+'/'+program.configPath+'/index.json');
  /* Recursively copy static directories. */
  copyDir(program.templatePath+'/css', path+'/css');
  copyDir(program.templatePath+'/js', path+'/js');
  copyDir(program.templatePath+'/images', path+'/images');

  /* Convert index.jade to index.html. */
  var indexFile = jade.compile(fs.readFileSync(program.templatePath+'/index.jade'))({cfg:cfg});
  fs.writeFileSync( path+'/index.html', indexFile );

  /* Compile event.jade. */
  var createEventMarkup = jade.compile(fs.readFileSync(program.templatePath+'/event.jade'));

  /* Generate a new page for each event. */
  _.each(cfg.events, function(v){
    /* Copy images. */
    mkdir(path+'/'+v.id);
    copyDir(program.configPath+'/'+v.id+'/images', path+'/'+v.id+'/images');
    /* Make gallery if any images. */
    var imagesSrcPath = program.configPath+'/'+v.id+'/gallery';
    var images = [];
    try {
      images = fs.readdirSync(imagesSrcPath);
    } catch(e) {}
    /* Resize and save images. */
    var imagesDestPath = path+'/'+v.id+'/gallery';
    mkdir(imagesDestPath);
    prepImages(images, imagesSrcPath, imagesDestPath, function(photos){
      /* Order event pictures by name. */
      photos = _.sortBy(photos, function(p){ return p.name });
      /* Create event file. */
      fs.writeFileSync( path+'/'+v.id+'.html', createEventMarkup({
         cfg:cfg
       , images:photos
       , event:v
       , getDate:function(dd){
         var d = dd.getDate();
         if (d === 1 || d === 21 || d === 31)  return d+"st";
         else if (d === 2 || d === 22)         return d+"nd";
         else if (d === 3 || d === 23)         return d+"rd";
         else                                  return d+"th";
       }
       , getMinutes:function(dd){
         var d = dd.getMinutes();
         return (d<=9) ? '0'+d : d;
       }
       , dayNames:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
       , monthNames:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
     })); 
   });
 });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} cb
 */
function emptyDirectory(path, cb) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    cb(!files || !files.length);
  });
}


/**
 * Prepare resized images and thumbnails.
 *
 * @param {Array} images
 * @param {String} path
 * @param {Function} cb
 */
function prepImages(images, sourcePath, destPath, cb) {
  var tasks = [];
  _.each(images, function(img){
    /* Save thumbnail paths. */
    var tbPath = 'tb_' + img;
    var modalPath = 'mod_' + img;
    tasks.push(function(cb){
      var curPath = sourcePath+'/'+img;
      gm(curPath).identify(function(err, features){
        if (err) {cb(err);}
        //console.log('features',features);
        var width = features.size.width;
        var height = features.size.height;
        //console.log("original size: " + width + "x"+height);
        /* Compute img size for thumbnail and modal. */
        var tbwidth = (width > 163) ? 163 : width;
        var tbheight  = (height*tbwidth) / width;
        var w = (width > 800) ? 800 : width;
        height  = (height*w) / width;
        //console.log("tb:" + tbwidth + 'x' + tbheight + ' modal: '+ width + 'x' + height);
        /* Actual thumbnail resize. */
        gm(curPath).resize(tbwidth, tbheight).quality(100).write(destPath+'/tb_'+img, function(err){
          if (err) {cb(err);}
          /* Actual modal resize. */
          gm(curPath).resize(width, height).quality(100).write(destPath+'/mod_'+img, function(err){
            if (err) {cb(err);}
            var photo = {
              name: img,
              thumbnail: tbPath,
              modal:     modalPath,
            };
            cb(null, photo);
          });
        });
      });
    });
  });
  async.parallel(tasks, function(err, results){
    if (err) abort(err);
    cb(results);
  });
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 */
function mkdir(path) {
  var r = mkdirp.sync(path, 0755);
  if (!r) 
    console.log('   \033[36mcreate\033[0m : ' + path);
  return r;
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
}
