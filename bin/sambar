#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , jade    = require('jade')
  , pkg     = require('../package.json')
  , version = pkg.version
  , mkdirp  = require('mkdirp')
  , wrench  = require('wrench')
  , os      = require('os')
  , fs      = require('fs')
  , _       = require('underscore')
  , gm      = require('gm')
  , async   = require('async')
  ;

// CLI

program
  .version(version)
  .option('-c, --configFile [file]', 'Config file')
  .option('-t, --templatePath [path]', 'Template path')
  .option('-o, --outputDir [path]',    'Output directory')
  .option('-f, --force',        'Force on non-empty directory')
  .parse(process.argv);

/* Generate site. */

(function createSite(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createSiteAt(path);
    } else {
      program.confirm('Destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createSiteAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(program.outputDir);

/**
 * Create site at the given directory `path`.
 *
 * @param {String} path
 */
function createSiteAt(path) {
  console.log();
  process.on('exit', function(){
    console.log();
    console.log('   bye');
  });

  mkdir(path, function(){
    var template = program.templatePath;
    var cfg = require(process.cwd()+'/'+program.configFile);
    /* Get images if any. */
    var re = /^(.*\/).*\.json$/ig;
    var matches = re.exec(program.configFile);
    var cfgPath = matches[1];
    var images = [];
    try {
      images = fs.readdirSync(cfgPath+'images');
    } catch(err){
      abort(err);
    }
    /* Resize and save images. */
    prepImages(images, cfgPath, path+'/eventPics', function(photos){
      /* Order event pictures by name. */
      photos = _.sortBy(photos, function(photo){
        return photo.name;
      });
      /* Recursively copy static directories. */
      wrench.copyDirSyncRecursive(template+'/css', path+'/css');
      wrench.copyDirSyncRecursive(template+'/js', path+'/js');
      wrench.copyDirSyncRecursive(template+'/images', path+'/images');

      /* Convert index.jade to index.html. */
      var index = jade.compile(fs.readFileSync(template+'/index.jade'))({cfg:cfg});
      fs.writeFileSync( path+'/index.html', index );

      /* Convert event.jade to event.html. */

      var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
      var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      function getDate(dd){
        var d = dd.getDate();
        if (d === 1 || d === 21 || d === 31)  return d+"st";
        else if (d === 2 || d === 22)         return d+"nd";
        else if (d === 3 || d === 23)         return d+"rd";
        else                                  return d+"th";
      }
      function getMinutes(dd){
        var d = dd.getMinutes();
        return (d<=9) ? '0'+d : d;
      }

      var event = jade.compile(fs.readFileSync(template+'/event.jade'));
      /* Generate a new page for each event. */
      _.each(cfg.events, function(v){
        fs.writeFileSync( path+'/'+v.id, event({cfg:cfg, images:photos, event:v, getDate:getDate, getMinutes:getMinutes, dayNames:dayNames, monthNames:monthNames}) ); 
      });
    });
  });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} cb
 */
function emptyDirectory(path, cb) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    cb(!files || !files.length);
  });
}


/**
 * Prepare resized images and thumbnails.
 *
 * @param {Table} images
 * @param {String} path
 * @param {Function} cb
 */
function prepImages(images, sourcePath, destPath, cb) {
  var tasks = [];
  _.each(images, function(img){
    /* Save thumbnail paths. */
    var tbPath = '/eventPics/tb_' + img;
    var modalPath = '/eventPics/mod_' + img;
    tasks.push(function(cb){
      var curPath = sourcePath+'images/'+img;
      gm(curPath).autoOrient().quality(100).write(curPath, function(err){
        if (err) {cb(err);}
        gm(curPath).identify(function(err, features){
          if (err) {cb(err);}
          //console.log('features',features);
          var width = features.size.width;
          var height = features.size.height;
          //console.log("original size: " + width + "x"+height);
          /* Compute img size for thumbnail and modal. */
          var tbwidth = (width > 163) ? 163 : width;
          var tbheight  = (height*tbwidth) / width;
          var w = (width > 800) ? 800 : width;
          height  = (height*w) / width;
          //console.log("tb:" + tbwidth + 'x' + tbheight + ' modal: '+ width + 'x' + height);
          /* Actual thumbnail resize. */
          gm(curPath).resize(tbwidth, tbheight).quality(90).write(destPath+'/tb_'+img, function(err){

            if (err) {cb(err);}
            /* Actual modal resize. */
            gm(curPath).resize(width, height).quality(90).write(destPath+'/mod_'+img, function(err){
              if (err) {cb(err);}
              var photo = {
                name: img,
                thumbnail: tbPath,
                modal:     modalPath,
              };
              cb(null, photo);
            });
          }); 
        });
      });
    });
  });
  async.parallel(tasks, function(err, results){
    if (err) abort(err);
    cb(results);
  });
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} cb
 */
function mkdir(path, cb) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    cb && cb();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
}
